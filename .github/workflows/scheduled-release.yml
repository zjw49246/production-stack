name: Release vLLM Production Stack

on:
  # Run every Monday at 9:00 AM UTC
  schedule:
    - cron: '0 9 * * 1'
  
  # Allow manual triggering for testing and off-cycle releases
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      current_version: ${{ steps.bump-version.outputs.current_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver pyyaml uv

      - name: Determine Version Bump Type
        id: bump-type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "bump_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump Version
        id: bump-version
        run: |
          # Get current version from Chart.yaml
          CURRENT_VERSION=$(grep -oP 'version: \K[0-9]+\.[0-9]+\.[0-9]+' helm/Chart.yaml)
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          
          # Calculate new version based on bump type
          BUMP_TYPE="${{ steps.bump-type.outputs.bump_type }}"
          
          # Use semver to calculate new version
          NEW_VERSION=$(python -c "import semver; v = semver.VersionInfo.parse('${CURRENT_VERSION}'); print(getattr(v, 'bump_${BUMP_TYPE}')())")
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          echo "Current version: ${CURRENT_VERSION}"
          echo "New version: ${NEW_VERSION}"
          
          # Exit early if this is a dry run
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would bump version from ${CURRENT_VERSION} to ${NEW_VERSION}"
            exit 0
          fi
          
          # Update version in Chart.yaml only
          sed -i "s/version: ${CURRENT_VERSION}/version: ${NEW_VERSION}/" helm/Chart.yaml
          
          # Note: We're intentionally NOT updating the version in src/vllm_router/version.py
          # to keep the Docker image version as "dev" or maintain it separately
          
          # Commit the version bump
          git add helm/Chart.yaml
          git commit -m "Bump Helm chart version to ${NEW_VERSION}"
          git push

      - name: Create Release Tag
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          NEW_VERSION="${{ steps.bump-version.outputs.new_version }}"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

  release-helm:
    needs: prepare-release
    if: ${{ github.event.inputs.dry_run != 'true' }}
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          skip_existing: false
          packages_with_index: true
          charts_dir: "."
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  release-docker:
    needs: prepare-release
    if: ${{ github.event.inputs.dry_run != 'true' }}
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: zjw49246
          password: ${{ secrets.LMCACHE_DOCKER_SECRET }}

      - name: Extract version
        id: version
        run: |
          pip install uv
          raw_version=$(uv run python -c 'from vllm_router.version import __version__; print(__version__)')
          sanitized_version=${raw_version//+/-}
          echo "version=$sanitized_version" >> "$GITHUB_ENV"
          echo "Sanitized version: $sanitized_version"

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/router:latest
            ghcr.io/${{ github.repository }}/router:${{ env.version }}
            ghcr.io/${{ github.repository }}/router:${{ github.sha }}
            lmcache/lmstack-router:latest
            lmcache/lmstack-router:${{ env.version }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/router:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/router:buildcache,mode=max

  create-github-release:
    needs: [prepare-release, release-helm, release-docker]
    if: ${{ github.event.inputs.dry_run != 'true' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          release_name: Release v${{ needs.prepare-release.outputs.new_version }}
          body: |
            ## vLLM Production Stack v${{ needs.prepare-release.outputs.new_version }}
            
            Automated biweekly release.
            
            ### Changes
            
            This release includes all changes since v${{ needs.prepare-release.outputs.current_version }}.
            
            - Docker image: `lmcache/lmstack-router:${{ needs.prepare-release.outputs.new_version }}`
            - Helm chart version: `${{ needs.prepare-release.outputs.new_version }}`
          draft: false
          prerelease: false